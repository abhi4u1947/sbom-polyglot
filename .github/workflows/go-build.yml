name: Go App Build and SBOM

on:
  push:
    branches: [ main ]
    paths:
      - 'go-app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'go-app/**'

jobs:
  build:
    name: Build and Generate SBOM for Go App
    runs-on: ubuntu-latest

    env:
      IMAGE_PUSH: true # Change to true if you want to push images
      IMAGE_REGISTRY: ghcr.io
      IMAGE_GROUP: ${{ github.repository_owner }}
      IMAGE_NAME: sbom-polyglot-go-app
      IMAGE_TAG: ${{ github.sha }}

      # OCI Metadata
      IMAGE_AUTHOR: ${{ github.actor }}
      IMAGE_SOURCE: https://github.com/${{ github.repository }}
      IMAGE_LICENSE: Apache-2.0
      IMAGE_REGISTRY_USERNAME: ${{ github.actor }}
      IMAGE_REGISTRY_PASSWORD: ${{ secrets.GIT_ACTIONS_PAT }}

      UPLOAD_ARTIFACTS_NAME: go-app-artifacts
      UPLOAD_SBOM_ARTIFACTS_NAME: go-app-sboms
      SKIP_CDXGEN: false  # Set to false to re-enable Cdxgen
      SKIP_SYFT: false  # Set to false to re-enable Syft

      # CDXGen Config
      FETCH_LICENSE: true
      CDXGEN_DEBUG_MODE: verbose
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Make
      run: sudo apt-get install -y make

    - name: Get dependencies
      working-directory: ./go-app
      run: make mod-download

    - name: Build Go App
      working-directory: ./go-app
      run: make build

    - name: Test Go App
      working-directory: ./go-app
      run: make test

    - name: Download cyclonedx-gomod
      uses: CycloneDX/gh-gomod-generate-sbom@v2
      with:
        version: v1

    - name: Generate SBOM for Go App
      working-directory: ./go-app/src
      run: cyclonedx-gomod app -json -licenses -packages -files -output ../bin/go-app.cdx.json -main .

    - name: Build Docker Image for Go App
      working-directory: ./go-app
      run: docker build -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

    - name: Login to GitHub Container Registry (for pushing final image)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker Image
      if: env.IMAGE_PUSH == 'true'
      run: docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.UPLOAD_ARTIFACTS_NAME }}
        path: |
          ./go-app/bin/**
        if-no-files-found: ignore

    - name: Download Uploaded Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.UPLOAD_ARTIFACTS_NAME }}
        path: ./extracted-artifacts

    - name: Show extracted artifact tree
      run: tree -a -L 4 ./extracted-artifacts

    - name: SBOM (syft) create output directory
      run: mkdir -p sboms/syft/

    - name: SBOM (syft) for Go App Binaries
      if: env.SKIP_SYFT != 'true'
      uses: anchore/sbom-action@v0.18.0
      with:
        path: ./go-app/bin/go-app
        output-file: sboms/syft/go-app.syft.cdx.json
        format: cyclonedx-json
        upload-artifact: false
        upload-release-assets: false

    - name: SBOM (syft) for Container Image
      if: env.SKIP_SYFT != 'true'
      uses: anchore/sbom-action@v0.18.0
      with:
        image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        format: cyclonedx-json
        output-file: sboms/syft/go-app-container.syft.cdx.json
        upload-artifact: false
        upload-release-assets: false
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GIT_ACTIONS_PAT }}

    - name: SBOM (cdxgen) create output directory
      run: mkdir -p sboms/cdxgen/

    - name: SBOM (cdxgen) for Go App Binaries
      if: env.SKIP_CDXGEN != 'true'
      run: .github/scripts/generate-cdxgen-sbom.sh
      env:
        CONF_PROJECT_DIR: ./go-app/bin/go-app
        CONF_ECOSYSTEMS: go binary
        CONF_RESULT_PATH: sboms/cdxgen/go-app.cdxgen.cdx.json

    - name: SBOM (cdxgen) for Container Image
      if: env.SKIP_CDXGEN != 'true'
      run: .github/scripts/generate-cdxgen-sbom.sh
      env:
        CONF_PROJECT_DIR: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        CONF_ECOSYSTEMS: docker
        CONF_RESULT_PATH: sboms/cdxgen/go-app-container.cdxgen.cdx.json

    - name: Upload Combined SBOMs (ALL)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.UPLOAD_SBOM_ARTIFACTS_NAME }}
        path: sboms/
        if-no-files-found: warn
